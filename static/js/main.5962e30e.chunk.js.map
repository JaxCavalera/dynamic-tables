{"version":3,"sources":["components/table-row/TableRow-models.ts","shared-styles/colours.ts","shared-styles/paragraphs.tsx","ErrorBoundary.tsx","shared-styles/headings.tsx","components/table-heading/TableHeading-styles.ts","components/table-heading/TableHeading.tsx","components/table-heading/TableHeading-logic.ts","components/table/Table-styles.ts","components/table-row-item/TableRowItem-models.ts","components/empty-row-item/EmptyRowItem.tsx","components/table-row-item/TableRowItem-styles.ts","components/table-heading/TableHeading-models.ts","components/table-row-item/TableRowItem.tsx","components/table-row/TableRow-styles.ts","components/table-row/TableRow.tsx","components/table-row/TableRow-logic.ts","components/table/Table.tsx","components/table/Table-logic.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TableRowTestIds","colours","opacity","SectionParagraph","styled","p","props","marginOverride","ErrorBoundary","state","hasError","errorMsg","Error","errorInfo","error","info","this","setState","children","ErrorPanel","message","console","log","PureComponent","Heading1","h1","TableHeadingWrapper","div","TableHeading","processedHeadingItems","headingItems","sortColumnId","sortDirection","map","headingItem","canSort","columnId","processHeadingItems","key","value","TableWrapper","TableRows","TableRowItemTestIds","EmptyRowItem","SortDirection","RowItem","TableRowItem","itemId","Content","data-testid","tableRowItem","TableRowWrapper","TableRow","rowId","rowItems","processedRowItems","columnIds","id","rowItem","find","item","emptyRowItem","uuidV4","filterValue","processRowItems","tableRow","className","Table","headingData","rows","rowData","generateTableRowItems","tableRowItems","columnName","targetColumn","filter","toLowerCase","length","App","asc","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5962e30e.chunk.js","sourcesContent":["import { TableRowItemProps } from \"../table-row-item/TableRowItem-models\";\n\nexport interface TableRowProps {\n  columnIds: string[];\n  rowId: string;\n  rowItems: TableRowItemProps[];\n}\n\nexport enum TableRowTestIds {\n  tableRow = 'tableRow',\n}","export const colours = {\n  black: 'rgb(0, 0, 0)',\n  blackOpacity: (opacity: number = 1) => `rgba(0, 0, 0, ${opacity})`,\n  blue1: 'rgb(247, 251, 255)',\n  blue5: 'rgb(0, 100, 180)',\n  blueOpacity: (opacity: number = 1) => `rgb(0, 100, 180, ${opacity})`,\n  grey1: 'rgb(230, 230, 230)',\n  grey5: 'rgb(150, 150, 150)',\n  grey8: 'rgb(50, 50, 50)',\n  orange1: 'rgb(254, 240, 236)',\n  orange4: 'rgb(247, 125, 85)',\n  orange5: 'rgb(245, 85, 30)',\n  orangeOpacity: (opacity: number = 1) => `rgb(245, 85, 30, ${opacity})`,\n  red5: 'rgb(255, 0, 0)',\n  white: 'rgb(255, 255, 255)',\n  whiteOpacity: (opacity: number = 1) => `rgba(255, 255, 255, ${opacity})`,\n};","import styled from 'styled-components/macro';\nimport { colours } from './colours';\n\n/**\n * marginOverride [e.g \"1.2rem 1rem\"] - css string matching exact margin override value\n */\ninterface SectionParagraphProps {\n  marginOverride?: string;\n}\n\nexport const SectionParagraph = styled.p`\n  font-size: 1.4rem;\n  color: ${colours.black};\n  margin: ${(props: SectionParagraphProps) => (\n    typeof props.marginOverride !== 'undefined' && props.marginOverride\n  )};\n`;","import React, { PureComponent } from 'react';\nimport { SectionParagraph } from './shared-styles/paragraphs';\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  errorMsg: Error | null;\n  errorInfo: object;\n}\n\nexport default class ErrorBoundary extends PureComponent<ErrorBoundaryProps, ErrorBoundaryState> {\n  state = {\n    hasError: false,\n    errorMsg: new Error(),\n    errorInfo: {},\n  };\n\n  componentDidCatch(error: Error | null, info: object) {\n    this.setState({\n      hasError: true,\n      errorMsg: error,\n      errorInfo: info,\n    });\n  }\n\n  render() {\n    const { hasError, errorMsg, errorInfo } = this.state;\n    const { children } = this.props;\n\n    const ErrorPanel = () => (\n      <div>\n        <SectionParagraph>\n          <span>Unhandled exception encountered:</span>\n          <span>{errorMsg && errorMsg.message}</span>\n        </SectionParagraph>\n      </div>\n    );\n\n    if (hasError) {\n      console.log('errobj:', errorMsg, 'info:', errorInfo);\n    }\n\n    return hasError ? <ErrorPanel /> : children;\n  }\n}","import styled from 'styled-components/macro';\n\nexport const Heading1 = styled.h1`\n  width: 100%;\n  text-align: center;\n  margin: 0;\n  font-size: 1.8rem;\n`;\n","import styled from 'styled-components/macro';\n\nexport const TableHeadingWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 75%;\n  margin: 0.5rem;\n`;\n","import React from 'react';\nimport { TableHeadingProps } from './TableHeading-models';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport { processHeadingItems } from './TableHeading-logic';\nimport { Heading1 } from '../../shared-styles/headings';\nimport { TableHeadingWrapper } from './TableHeading-styles';\n\nexport const TableHeading = ({ headingItems, sortColumnId, sortDirection }: TableHeadingProps) => {\n  const processedHeadingItems = processHeadingItems(headingItems, sortColumnId, sortDirection);\n\n  return (\n    <ErrorBoundary>\n      <TableHeadingWrapper>\n        {processedHeadingItems.map((headingItem) => (\n          <Heading1 key={headingItem.columnId}>{headingItem.value}</Heading1>\n        ))}\n      </TableHeadingWrapper>\n    </ErrorBoundary>\n  );\n};\n","import { TableHeadingItem, ProcessedHeadingItem } from './TableHeading-models';\nimport { SortDirection } from './TableHeading-models';\n\n/**\n * Flags the heading item being used for sorting by listing the sortDirection on it\n * @param headingItems A list of all headings for the table\n * @param sortColumnId The id matching the column beign used for sorting table data\n * @param sortDirection The direction table data is being sorted in (asc or desc)\n * @returns Processed version of the original headingItems list\n */\nexport const processHeadingItems = (\n  headingItems: TableHeadingItem[],\n  sortColumnId: string,\n  sortDirection: SortDirection,\n): ProcessedHeadingItem[] =>\n  headingItems.map((headingItem) => {\n    if (headingItem.canSort && headingItem.columnId === sortColumnId) {\n      return {\n        ...headingItem,\n        sortDirection,\n      };\n    }\n\n    return headingItem;\n  });\n","import styled from 'styled-components/macro';\n\nexport const TableWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const TableRows = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 75%;\n  margin: 0;\n  padding: 0;\n`;\n","import { FunctionComponent } from 'react';\n\nexport interface TableRowItemProps {\n  columnId: string;\n  itemId: string;\n  Content: FunctionComponent;\n  filterValue?: string | number;\n}\n\nexport enum TableRowItemTestIds {\n  tableRowItem = 'tableRowItem',\n}\n","import React from 'react';\nimport ErrorBoundary from '../../ErrorBoundary';\n\nexport const EmptyRowItem = () => (\n  <ErrorBoundary>\n    <p>M/A</p>\n  </ErrorBoundary>\n);","import styled from 'styled-components/macro';\nimport { colours } from '../../shared-styles/colours';\n\nexport const RowItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  margin: 0 0.25rem 0.5rem;\n  padding: 0 1.5rem;\n  text-align: center;\n  background-color: ${colours.blackOpacity(0.075)};\n\n  & :first-child {\n    margin-left: 0;\n  }\n\n  & :last-child {\n    margin-right: 0;\n  }\n`;\n","export enum SortDirection {\n  asc = 'ascending',\n  desc = 'descending',\n}\n\nexport interface TableHeadingItem {\n  columnId: string;\n  value: string;\n  canSort: boolean;\n}\n\nexport interface ProcessedHeadingItem extends TableHeadingItem {\n  sortDirection?: SortDirection;\n}\n\nexport interface TableHeadingProps {\n  headingItems: TableHeadingItem[];\n  sortColumnId: string;\n  sortDirection: SortDirection;\n}","import React from 'react';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport { TableRowItemProps, TableRowItemTestIds } from './TableRowItem-models';\nimport { RowItem } from './TableRowItem-styles';\n\nexport const TableRowItem = ({ itemId, Content }: TableRowItemProps) => (\n  <ErrorBoundary>\n    <RowItem data-testid={TableRowItemTestIds.tableRowItem} key={itemId}>\n      <Content></Content>\n    </RowItem>\n  </ErrorBoundary>\n);\n","import styled from 'styled-components/macro';\n\nexport const TableRowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 0;\n  padding: 0;\n`;\n","import React from 'react';\nimport { TableRowProps, TableRowTestIds } from './TableRow-models';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport { processRowItems } from './TableRow-logic';\nimport { TableRowItem } from '../table-row-item/TableRowItem';\nimport { TableRowWrapper } from './TableRow-styles';\n\nexport const TableRow = ({ rowId, rowItems, columnIds }: TableRowProps) => {\n  const processedRowItems = processRowItems(columnIds, rowItems);\n\n  return (\n    <ErrorBoundary>\n      <TableRowWrapper key={rowId} data-testid={TableRowTestIds.tableRow} className=\"tableRow\">\n        {processedRowItems.map((rowItem) => (\n          <TableRowItem {...rowItem} />\n        ))}\n      </TableRowWrapper>\n    </ErrorBoundary>\n  );\n};\n","import { v4 as uuidV4 } from 'uuid';\nimport { TableRowItemProps } from '../table-row-item/TableRowItem-models';\nimport { EmptyRowItem } from '../empty-row-item/EmptyRowItem';\n\n/**\n * Fill in column gaps with emptyRowItem data\n * @param columnIds A list of all columns in the table\n * @param rowItems A list of rowItem data for used columns in the current tableRow\n * @returns A processed version of the original TableRowItems list without gaps in the data\n */\nexport const processRowItems = (\n  columnIds: string[],\n  rowItems: TableRowItemProps[],\n): TableRowItemProps[] =>\n  columnIds.map(\n    (id: string): TableRowItemProps => {\n      const rowItem = rowItems.find((item) => item.columnId === id);\n      const emptyRowItem = {\n        columnId: id,\n        itemId: uuidV4(),\n        Content: EmptyRowItem,\n        filterValue: '',\n      };\n\n      return rowItem || emptyRowItem;\n    },\n  );\n","import React from 'react';\nimport { TableProps } from './Table-models';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport { TableHeading } from '../table-heading/TableHeading';\nimport { TableRows, TableWrapper } from './Table-styles';\nimport { TableRow } from '../table-row/TableRow';\n\nexport const Table = ({ headingData, rows }: TableProps) => {\n  return (\n    <ErrorBoundary>\n      <TableWrapper>\n        <TableHeading {...headingData} />\n        <TableRows>\n          {rows.map((rowData) => (\n            <TableRow {...rowData} />\n          ))}\n        </TableRows>\n      </TableWrapper>\n    </ErrorBoundary>\n  );\n};\n","import { v4 as uuidV4 } from 'uuid';\nimport { TableHeadingItem } from '../table-heading/TableHeading-models';\nimport { BasicHeadingItem, BasicTableRow, BasicTableRowItem } from './Table-models';\nimport { TableRowProps } from '../table-row/TableRow-models';\nimport { TableRowItemProps } from '../table-row-item/TableRowItem-models';\n\n/**\n * ----------------------------------------------------------\n * Helper functions used for easily generating new table data\n * ----------------------------------------------------------\n */\n\n/**\n * Enhances a basic list of heading items with additional data for use by the Table component\n * @param headingList Contains the minimum information needed for a heading item\n * @returns The enhanced TableHeading list\n */\nexport const generateHeadingItems = (headingList: BasicHeadingItem[]): TableHeadingItem[] => {\n  return headingList.map((headingItem) => ({\n    ...headingItem,\n    columnId: uuidV4(),\n  }));\n};\n\n/**\n * Enhances a basic list of table rows with additional data for use by the Table component\n * @param tableRowItems Contains the minimum information needed for a table row\n * @returns The enhanced TableRowItems list\n */\nexport const generateTableRowItems = (\n  headingItems: TableHeadingItem[],\n  tableRowItems: BasicTableRowItem[],\n): TableRowItemProps[] => {\n  return tableRowItems.map((tableRowItem) => {\n    const { columnName, Content, filterValue } = tableRowItem;\n\n    const targetColumn = headingItems.filter(\n      (item) => item.value.toLowerCase() === columnName.toLowerCase(),\n    );\n\n    if (!targetColumn.length) {\n      throw new Error(`Invalid columnName specified: ${columnName}`);\n    }\n\n    return {\n      Content,\n      filterValue,\n      columnId: targetColumn[0].columnId,\n      itemId: uuidV4(),\n    };\n  });\n};\n\n/**\n * Enhances a basic list of table rows with additional data for use by the Table component\n * @param tableRows Contains the minimum information needed for a table row\n * @returns The enhanced TableRows list\n */\nexport const generateTableRows = (tableRows: BasicTableRow[]): TableRowProps[] => {\n  return tableRows.map((tableRow) => ({\n    ...tableRow,\n    rowId: uuidV4(),\n  }));\n};\n","import React from 'react';\nimport { Table } from './components/table/Table';\nimport { TableHeadingProps, SortDirection } from './components/table-heading/TableHeading-models';\nimport {\n  generateHeadingItems,\n  generateTableRows,\n  generateTableRowItems,\n} from './components/table/Table-logic';\nimport { TableRowProps } from './components/table-row/TableRow-models';\nimport { SectionParagraph } from './shared-styles/paragraphs';\n\nexport const App = () => {\n  const headingItems = generateHeadingItems([\n    { value: 'Firstname', canSort: true },\n    { value: 'Lastname', canSort: true },\n    { value: 'Bio', canSort: false },\n  ]);\n\n  const headingData: TableHeadingProps = {\n    headingItems,\n    sortColumnId: headingItems[0].columnId,\n    sortDirection: SortDirection.asc,\n  };\n\n  const columnIds = headingItems.map((headingItem) => headingItem.columnId);\n\n  const rowData: TableRowProps[] = generateTableRows([\n    {\n      columnIds,\n      rowItems: generateTableRowItems(headingItems, [\n        {\n          columnName: 'Firstname',\n          Content: () => <SectionParagraph>Jake</SectionParagraph>,\n          filterValue: 'Jake',\n        },\n        {\n          columnName: 'Lastname',\n          Content: () => <SectionParagraph>Peterson</SectionParagraph>,\n          filterValue: 'Peterson',\n        },\n        {\n          columnName: 'Bio',\n          Content: () => (\n            <SectionParagraph>25 years old, living with parents in the basement.</SectionParagraph>\n          ),\n        },\n      ]),\n    },\n    {\n      columnIds,\n      rowItems: generateTableRowItems(headingItems, [\n        {\n          columnName: 'Firstname',\n          Content: () => <SectionParagraph>Paul</SectionParagraph>,\n          filterValue: 'Paul',\n        },\n        {\n          columnName: 'Lastname',\n          Content: () => <SectionParagraph>Baker</SectionParagraph>,\n          filterValue: 'Baker',\n        },\n        {\n          columnName: 'Bio',\n          Content: () => (\n            <SectionParagraph>Dedicated foodie, lives in a studio apartment.</SectionParagraph>\n          ),\n        },\n      ]),\n    },\n    {\n      columnIds,\n      rowItems: generateTableRowItems(headingItems, [\n        {\n          columnName: 'Firstname',\n          Content: () => <SectionParagraph>Thomas</SectionParagraph>,\n          filterValue: 'Thomas',\n        },\n        {\n          columnName: 'Lastname',\n          Content: () => <SectionParagraph>Jefferson</SectionParagraph>,\n          filterValue: 'Jefferson',\n        },\n        {\n          columnName: 'Bio',\n          Content: () => (\n            <SectionParagraph>\n              Loves candlelit dinners, pretty much uses candles for all lighting purposes.\n            </SectionParagraph>\n          ),\n        },\n      ]),\n    },\n  ]);\n\n  return (\n    <div className=\"App\">\n      <Table headingData={headingData} rows={rowData} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}